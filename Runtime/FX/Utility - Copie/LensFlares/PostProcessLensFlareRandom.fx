// Lens-Flare post-process random functions
// The randomness is introduced via standard Perlin noise
// I precomputed 256 random float4 values in an array that are interpolated to yield the apparence of randomness

#define USE_TEXTURE	// Define this to use the random texture instead of a heavy array

float	GlobalSeed;			// Global random seed for the entire flare

#ifdef USE_TEXTURE
// This version of the GetNoise() function simply samples the 256x1 texture containing random float4
Texture2D	TextureRandom;

SamplerState LinearWrap
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = WRAP;
	AddressV = WRAP;
	AddressW = WRAP;
};

// Gets a random noise value based on the specified position
// Note: the noise loops every integer position
float4	GetNoise( float t )
{
	return TextureRandom.SampleLevel( LinearWrap, t, 0 );
}

#else
// This version of the GetNoise() function reads the random values from an array of float4
float4	RandomValues[] = { float4( 0.2486686,0.110744,0.4670107,0.7716041), float4( 0.6575189,0.4327826,0.3540838,0.9438623), float4( 0.1012665,0.6424556,0.02863681,0.2480291), float4( 0.3201101,0.9897671,0.6821231,0.6548879), float4( 0.2827292,0.6153464,0.7042515,0.7017967), float4( 0.9497784,0.09338848,0.1609072,0.3819711), float4( 0.7979477,0.1694672,0.7937836,0.3072282), float4( 0.8230284,0.8864695,0.5563023,0.716734), float4( 0.6992958,0.0136144,0.9918761,0.8063016), float4( 0.8587436,0.06250332,0.5143937,0.5252582), float4( 0.2728252,0.9937963,0.6911044,0.3866155), float4( 0.4343339,0.6754055,0.6773817,0.4728747), float4( 0.2445188,0.3534841,0.5262526,0.1694273), float4( 0.3465878,0.691695,0.3951431,0.1552801), float4( 0.9498368,0.0850396,0.9736564,0.4880517), float4( 0.638999,0.04685552,0.1208338,0.2147969), float4( 0.08615324,0.3119028,0.5487333,0.3064957), float4( 0.9978911,0.8758215,0.7961443,0.2202259), float4( 0.1009527,0.1789933,0.4289715,0.9559821), float4( 0.4022841,0.7742917,0.9476371,0.1225422), float4( 0.4920855,0.3209089,0.0627095,0.4695443), float4( 0.3602169,0.386875,0.3701462,0.007600868), float4( 0.6184713,0.836596,0.8564648,0.773704), float4( 0.0888469,0.02634201,0.8862593,0.2259696), float4( 0.8729625,0.4763075,0.3004622,0.1224311), float4( 0.1266722,0.3708859,0.4749836,0.3686972), float4( 0.5573398,0.3060268,0.06847464,0.1675945), float4( 0.2627234,0.439161,0.752996,0.1755451), float4( 0.1374024,0.8511143,0.9959663,0.3180901), float4( 0.984146,0.6512895,0.85458,0.6992782), float4( 0.9417566,0.5411325,0.6880244,0.1612951), float4( 0.0193567,0.02244029,0.131379,0.07461064), float4( 0.292734,0.2030019,0.08301959,0.9259765), float4( 0.4738294,0.825206,0.9958699,0.1211995), float4( 0.8459253,0.6940123,0.9122045,0.05419015), float4( 0.3184004,0.2025517,0.7448774,0.1793103), float4( 0.08359994,0.6809197,0.6363015,0.2377326), float4( 0.03037575,0.5681692,0.2418236,0.221673), float4( 0.6217275,0.601184,0.1806745,0.5855398), float4( 0.6828615,0.3136886,0.3493405,0.5348995), float4( 0.1746477,0.993864,0.8748605,0.05972157), float4( 0.3561414,0.8270195,0.7017156,0.3121964), float4( 0.8552443,0.8747667,0.4721647,0.2901338), float4( 0.739085,0.8003899,0.3808778,0.7392049), float4( 0.7962551,0.5087141,0.07769512,0.338437), float4( 0.3861387,0.8936464,0.04423489,0.7245648), float4( 0.9611782,0.8613466,0.304249,0.8726454), float4( 0.6445315,0.4103302,0.438338,0.5322368), float4( 0.3446717,0.377305,0.8795424,0.3245364), float4( 0.3276912,0.6851559,0.8231689,0.2565804), float4( 0.9792041,0.3241051,0.3824883,0.155609), float4( 0.0960045,0.9516898,0.482588,0.8213376), float4( 0.2203062,0.4414696,0.7892848,0.1741474), float4( 0.2359935,0.01090356,0.1487608,0.2810014), float4( 0.9496291,0.1502957,0.09854329,0.4947948), float4( 0.5227705,0.8290702,0.6676649,0.4449141), float4( 0.4364287,0.939928,0.945462,0.3617801), float4( 0.9208475,0.05634141,0.4115137,0.1110992), float4( 0.6855453,0.8211147,0.3592329,0.06203363), float4( 0.511158,0.8886259,0.6285603,0.009488435), float4( 0.3787587,0.4829114,0.6523392,0.2030619), float4( 0.6210454,0.2641906,0.2962433,0.3337682), float4( 0.2285442,0.598541,0.3749073,0.1773955), float4( 0.5866126,0.3283741,0.7338099,0.1501339), float4( 0.6564402,0.9375742,0.7191803,0.1560765), float4( 0.006227787,0.1208079,0.9004902,0.1639648), float4( 0.02995582,0.6781856,0.4886022,0.4148788), float4( 0.6516707,0.08672716,0.7698434,0.06100323), float4( 0.5217354,0.08905486,0.1160361,0.03985905), float4( 0.176731,0.464603,0.8238687,0.1722381), float4( 0.6436847,0.6116939,0.1332359,0.3223065), float4( 0.6814341,0.2341183,0.5244866,0.3571711), float4( 0.08730473,0.209099,0.4055934,0.5735838), float4( 0.1694455,0.4724838,0.003260648,0.2579508), float4( 0.5824212,0.4883744,0.1731061,0.9428599), float4( 0.7755885,0.8813645,0.6820975,0.141817), float4( 0.8286976,0.3139041,0.6556601,0.4975577), float4( 0.212338,0.6939509,0.9734029,0.1918372), float4( 0.1137055,0.5469422,0.5123918,0.3945339), float4( 0.987572,0.5781837,0.4825307,0.7958375), float4( 0.153699,0.131431,0.327574,0.4425717), float4( 0.6811337,0.1962596,0.8915577,0.0492516), float4( 0.08579421,0.8580853,0.4574378,0.6883566), float4( 0.2914968,0.8810088,0.3966496,0.7623202), float4( 0.9295964,0.9914188,0.4936088,0.36753), float4( 0.5784582,0.02692892,0.1448332,0.3933538), float4( 0.2356961,0.2137562,0.4598783,0.6225033), float4( 0.960092,0.6087267,0.2703788,0.004237576), float4( 0.00584368,0.3772686,0.7891609,0.6441575), float4( 0.5537905,0.2395258,0.4606833,0.6324381), float4( 0.4223464,0.6064085,0.4117635,0.3542526), float4( 0.2365131,0.2850462,0.9003404,0.2326967), float4( 0.1502926,0.7500716,0.4649375,0.9961531), float4( 0.08457486,0.1150007,0.2173794,0.12677), float4( 0.9865978,0.9342202,0.2068755,0.4673776), float4( 0.7363812,0.2690544,0.08915959,0.4770675), float4( 0.5877066,0.4532002,0.6825129,0.9142283), float4( 0.09184793,0.7524922,0.2085297,0.6900706), float4( 0.5307356,0.8611708,0.9451836,0.9720497), float4( 0.6151654,0.7905806,0.1568407,0.9506499), float4( 0.3134158,0.2271816,0.4722107,0.2100204), float4( 0.1437892,0.2742257,0.9196627,0.890843), float4( 0.1598892,0.6623909,0.6575596,0.6195703), float4( 0.0326503,0.9933057,0.8960568,0.153292), float4( 0.5172489,0.934696,0.7665461,0.7833129), float4( 0.6025333,0.9861121,0.1408487,0.3978004), float4( 0.5415418,0.7748669,0.4654175,0.2234041), float4( 0.169817,0.2453297,0.5116046,0.1960173), float4( 0.7773795,0.2562256,0.1539618,0.5091996), float4( 0.7968436,0.8791391,0.3332782,0.3134809), float4( 0.5335375,0.7916699,0.754339,0.4294571), float4( 0.09493255,0.5889595,0.6574203,0.5374299), float4( 0.9651139,0.7918916,0.4548008,0.6804694), float4( 0.0240345,0.3735278,0.3481166,0.3273036), float4( 0.08633287,0.07441026,0.6684786,0.3689223), float4( 0.8088081,0.6962586,0.7210259,0.9145595), float4( 0.1507863,0.4615423,0.8421907,0.7764246), float4( 0.8393439,0.3868572,0.3564484,0.6381097), float4( 0.6014178,0.4530651,0.2497754,0.8108634), float4( 0.2317731,0.7113917,0.3028679,0.9525824), float4( 0.1174467,0.9279876,0.2582902,0.3779254), float4( 0.7905288,0.8311352,0.1719828,0.4038517), float4( 0.9081091,0.8266581,0.4228668,0.7224334), float4( 0.2106606,0.9643559,0.5046728,0.8372789), float4( 0.07064396,0.8397795,0.2786708,0.6333902), float4( 0.7467688,0.8809956,0.698086,0.5782567), float4( 0.4354433,0.816691,0.07905161,0.5709694), float4( 0.1237524,0.5372532,0.09553058,0.3749412), float4( 0.7715424,0.7158962,0.2514756,0.8808205), float4( 0.4379684,0.3431006,0.1240307,0.319651), float4( 0.2895595,0.438339,0.8683156,0.01268576), float4( 0.9639904,0.634015,0.4274492,0.6370618), float4( 0.9483923,0.4124965,0.7402194,0.3919936), float4( 0.4327208,0.6694777,0.2058136,0.2364511), float4( 0.2299017,0.6800334,0.9424821,0.9738378), float4( 0.7520836,0.6010134,0.2800993,0.3708559), float4( 0.7311276,0.04792556,0.950891,0.4947643), float4( 0.7128803,0.6238524,0.3993105,0.7275434), float4( 0.7157488,0.9590198,0.3438307,0.3084298), float4( 0.01268005,0.6854002,0.6142663,0.8014283), float4( 0.3892418,0.4419898,0.6225771,0.7112559), float4( 0.7970337,0.703537,0.9422203,0.1020647), float4( 0.5100827,0.01502452,0.6509188,0.7579349), float4( 0.4006184,0.1501929,0.5675675,0.6885461), float4( 0.1582397,0.4974597,0.2815582,0.9160649), float4( 0.6831239,0.9326849,0.9241815,0.3245399), float4( 0.01318601,0.01267603,0.6762448,0.4737011), float4( 0.325647,0.8973838,0.223771,0.5445014), float4( 0.06576718,0.1410538,0.584596,0.3100938), float4( 0.9784364,0.5688434,0.5738221,0.02759059), float4( 0.1057052,0.8488263,0.9846816,0.6978558), float4( 0.9729337,0.6413755,0.3269249,0.5655559), float4( 0.3914523,0.6552845,0.1501901,0.5152204), float4( 0.403842,0.6982014,0.1183044,0.4565569), float4( 0.5178083,0.2980372,0.6980699,0.7843577), float4( 0.02729217,0.4685193,0.7764177,0.6126989), float4( 0.7912535,0.1064173,0.6921678,0.2595646), float4( 0.5655969,0.2574736,0.7101098,0.5893963), float4( 0.9236375,0.2539676,0.8103597,0.8342976), float4( 0.9480033,0.2263257,0.3516063,0.3718104), float4( 0.6857511,0.1106889,0.08224875,0.6703625), float4( 0.7471938,0.7085506,0.1406594,0.3675658), float4( 0.02274948,0.128039,0.7922856,0.6803992), float4( 0.8707736,0.7894644,0.0002984139,0.6371859), float4( 0.07240865,0.3719827,0.9066023,0.8665163), float4( 0.9492078,0.06736034,0.9999589,0.1339787), float4( 0.9451747,0.5607938,0.5915829,0.1498744), float4( 0.8878418,0.2840067,0.5085536,0.2914826), float4( 0.9464309,0.3262594,0.09860664,0.9166033), float4( 0.3862705,0.1060552,0.8655052,0.08270286), float4( 0.9657579,0.324602,0.2368151,0.4375579), float4( 0.4651881,0.02971065,0.7186227,0.1341731), float4( 0.2536692,0.1731737,0.761889,0.5760207), float4( 0.3197234,0.48509,0.4226027,0.6183907), float4( 0.11073,0.9482701,0.7251878,0.1863999), float4( 0.1169677,0.9907849,0.479724,0.7387427), float4( 0.6194854,0.500803,0.7339683,0.5445141), float4( 0.6908578,0.08369517,0.2509154,0.9663534), float4( 0.5064775,0.8238994,0.9007584,0.6246058), float4( 0.8305452,0.562401,0.6687906,0.915464), float4( 0.8421711,0.4574098,0.8962052,0.7146681), float4( 0.5221178,0.932533,0.9717592,0.4613409), float4( 0.9036568,0.4802159,0.8058733,0.4380004), float4( 0.3808675,0.6791053,0.9657351,0.974973), float4( 0.844878,0.4980724,0.8180726,0.9643851), float4( 0.2957424,0.1741086,0.4433153,0.169974), float4( 0.9222583,0.7955355,0.06954317,0.4958239), float4( 0.5843316,0.7979968,0.7878456,0.548329), float4( 0.2794795,0.8097237,0.3442289,0.6595579), float4( 0.0945797,0.7650559,0.2166249,0.6869524), float4( 0.5290438,0.2726274,0.6408573,0.2106419), float4( 0.2778219,0.812915,0.585486,0.8273722), float4( 0.8581644,0.9257854,0.7797278,0.3324728), float4( 0.7443284,0.7044055,0.6197217,0.6680625), float4( 0.01409454,0.7262312,0.7924098,0.7265823), float4( 0.8629898,0.4759353,0.8770093,0.10566), float4( 0.6923704,0.2575443,0.158521,0.5711437), float4( 0.3348764,0.3061772,0.8803933,0.0798221), float4( 0.2814475,0.1311202,0.4353413,0.023115), float4( 0.5332513,0.2326734,0.8921521,0.1093433), float4( 0.2100495,0.242171,0.6376595,0.6585461), float4( 0.01826902,0.4553727,0.8040006,0.575074), float4( 0.190002,0.6761664,0.6454634,0.3683484), float4( 0.9726461,0.4900427,0.8239625,0.05310845), float4( 0.395618,0.5351974,0.5182716,0.02027765), float4( 0.654394,0.01434224,0.4924958,0.5519872), float4( 0.04539215,0.6999057,0.05102534,0.6132082), float4( 0.2690642,0.5966067,0.1348112,0.7814212), float4( 0.8340791,0.6830665,0.5165327,0.6208189), float4( 0.8382758,0.2184632,0.08739094,0.2369976), float4( 0.4535437,0.583447,0.3811418,0.6587101), float4( 0.6607138,0.5120448,0.107176,0.7914048), float4( 0.3071577,0.3822329,0.627497,0.9980539), float4( 0.7144018,0.8718745,0.4549493,0.1957073), float4( 0.7496752,0.08567236,0.613154,0.3183633), float4( 0.4043474,0.1907924,0.3060098,0.5933953), float4( 0.5413551,0.8640422,0.5342693,0.2895796), float4( 0.97351,0.2031437,0.2148327,0.1771548), float4( 0.4478064,0.2812739,0.566734,0.070947), float4( 0.6332005,0.8337858,0.8912734,0.5333474), float4( 0.5927297,0.2596205,0.3060504,0.8868313), float4( 0.9691097,0.1367573,0.06701933,0.9622047), float4( 0.2281173,0.3208254,0.8711437,0.7526034), float4( 0.6053092,0.7690277,0.8326502,0.2627513), float4( 0.2774372,0.7877464,0.1173549,0.7966716), float4( 0.9777755,0.8175964,0.8178948,0.1040141), float4( 0.1674002,0.4503421,0.5502474,0.4331279), float4( 0.3051405,0.3840023,0.5625068,0.9158894), float4( 0.194399,0.07980666,0.7256336,0.1447268), float4( 0.884742,0.4191785,0.6242856,0.4045978), float4( 0.7970229,0.5720646,0.06146232,0.6526845), float4( 0.3319999,0.4622292,0.5718457,0.6787788), float4( 0.4486237,0.3039827,0.7935098,0.845454), float4( 0.7164309,0.0946018,0.5555719,0.7751333), float4( 0.4417257,0.2020364,0.719431,0.5187676), float4( 0.5865099,0.6338914,0.6570643,0.844115), float4( 0.7583186,0.9552544,0.5582044,0.5255025), float4( 0.04339402,0.6879234,0.3780093,0.8582587), float4( 0.1634609,0.7127571,0.9996487,0.4057109), float4( 0.7561341,0.1652103,0.7720141,0.705171), float4( 0.8784965,0.8714687,0.9845042,0.001157754), float4( 0.5904925,0.7170528,0.1994585,0.09979719), float4( 0.5242348,0.9505003,0.7030011,0.6827056), float4( 0.6997474,0.105518,0.8180879,0.1631315), float4( 0.9150004,0.2173473,0.8943659,0.3767456), float4( 0.9040248,0.04634313,0.6353848,0.7607002), float4( 0.9259735,0.9352511,0.6819932,0.003673802), float4( 0.09495312,0.1498609,0.01899921,0.2765155), float4( 0.4300222,0.01426006,0.6402711,0.7150412), float4( 0.6493872,0.6559065,0.2536225,0.04126589), float4( 0.7557958,0.4584073,0.001267695,0.09289372), float4( 0.9849223,0.6953037,0.1585113,0.05794284), float4( 0.8946691,0.8365172,0.4907105,0.5387868), float4( 0.2708444,0.3952686,0.8011462,0.8321534), float4( 0.2360839,0.223804,0.07518431,0.6552414), float4( 0.03505955,0.1957847,0.004844072,0.3743739), float4( 0.2486686,0.110744,0.4670107,0.7716041) };

// Gets a random noise value based on the specified position
// Note: the noise loops every integer position
float4	GetNoise( float t )
{
	t *= 256.0;
	float	It = floor( t );
	t -= It;
	It %= 256.0;

	return lerp( RandomValues[It], RandomValues[It+1.0], smoothstep( 0.0, 1.0, t ) );
}
#endif

// Gets a random noise value based on the specified position and using the global seed + the local effect seed to modify the result
float4	GetNoise( float t, float _RandomSeed )
{
	float4	V = GetNoise( t );	// Standard value
	float	Threshold = GetNoise( (t + GlobalSeed + _RandomSeed) * 0.00102354145342886386898669396111 ).x;
	return (V + Threshold) % 1.0;
}

// Gets FBM with 2 octaves of noise
float4	FBM2( float t, float _RandomSeed )
{
	float4	V = GetNoise( t, _RandomSeed );
			V += 0.5 * GetNoise( 2.0 * t, _RandomSeed );
	return 0.666666666666666666666 * V;
}
